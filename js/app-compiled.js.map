{"version":3,"sources":["app.js"],"names":[],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,EAAE,YAAI;;AAEF;;AAEA,QAAI,WAAW;;AAEX;AACA,eAAQ,EAHG;;AAKX;AACA,oBANW,0BAMK;AACZ,gBAAG,KAAK,KAAL,CAAW,MAAX,KAAsB,CAAzB,EAA2B;AACvB,wBAAQ,GAAR,CAAY,wBAAZ;AACH,aAFD,MAEO;AACH,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,KAAL,CAAW,MAA/B,EAAuC,GAAvC,EAA4C;AACxC,wBAAI,KAAK,KAAL,CAAW,CAAX,EAAc,SAAd,KAA4B,IAAhC,EAAsC;AAClC,gCAAQ,GAAR,CAAY,KAAZ,EAAmB,KAAK,KAAL,CAAW,CAAX,EAAc,SAAjC;AACH,qBAFD,MAEO;AACH,gCAAQ,GAAR,CAAY,IAAZ,EAAiB,KAAK,KAAL,CAAW,CAAX,EAAc,SAA/B;AACH;AACJ;AACJ;AACJ,SAlBU;;AAmBX;AACA,eApBW,mBAoBF,SApBE,EAoBS;AAChB,iBAAK,KAAL,CAAW,IAAX,CAAgB;AACZ,2BAAW,SADC;AAEZ,2BAAY;AAFA,aAAhB;;AAKA,iBAAK,YAAL;AACH,SA3BU;;AA4BX;AACA,uBA7BW,2BA6BM,QA7BN,EA6BgB,YA7BhB,EA6B8B;AACrC,iBAAK,KAAL,CAAW,QAAX,EAAqB,SAArB,GAAiC,YAAjC;AACA,iBAAK,YAAL;AACH,SAhCU;;AAiCX;AACA,mBAlCW,uBAkCE,QAlCF,EAkCY;AACnB,iBAAK,KAAL,CAAW,MAAX,CAAkB,QAAlB,EAA2B,CAA3B;AACA,iBAAK,YAAL;AACH,SArCU;;AAsCX;AACA,uBAvCW,2BAuCM,QAvCN,EAuCgB;AACvB,gBAAI,OAAO,KAAK,KAAL,CAAW,QAAX,CAAX;AACA,iBAAK,SAAL,GAAiB,CAAC,KAAK,SAAvB;AACA,iBAAK,YAAL;AACH,SA3CU;;AA4CX;AACA,iBA7CW,uBA6CE;AACT,gBAAI,aAAa,KAAK,KAAL,CAAW,MAA5B;AACA,gBAAI,iBAAiB,CAArB;;AAEA,iBAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,UAAnB,EAA+B,GAA/B,EAAmC;AAC/B,oBAAG,KAAK,KAAL,CAAW,CAAX,EAAc,SAAd,KAA4B,IAA/B,EAAoC;AAChC;AACH;AACJ;;AAED,gBAAG,mBAAmB,UAAtB,EAAiC;AAC7B,qBAAI,IAAI,KAAI,CAAZ,EAAe,KAAI,UAAnB,EAA+B,IAA/B,EAAmC;AAC/B,yBAAK,KAAL,CAAW,EAAX,EAAc,SAAd,GAA0B,KAA1B;AACH;AACD,qBAAK,YAAL;AACH,aALD,MAKO;AACH,qBAAI,IAAI,MAAI,CAAZ,EAAe,MAAI,UAAnB,EAA+B,KAA/B,EAAmC;AAC/B,yBAAK,KAAL,CAAW,GAAX,EAAc,SAAd,GAA0B,IAA1B;AACH;AACD,qBAAK,YAAL;AACH;AACJ;AAlEU,KAAf;AAwEH,CA5ED","file":"app-compiled.js","sourcesContent":["\n//TODO create a priority tasks list which will push items in it by clicking on i.e. a Star-icon.\n//TODO when user clicks on priority icons and if item is already marked as priority, the priority class and attributes should be removed.\n//TODO create a function so items in the completed list can be pushed back to the todoListUl (i.e when user accidentally click complete button).\n//TODO line-through the completedTasks text (text-decoration prop CSS).\n//TODO Add item to task list by pressing enterKey.\n//TODO View option to only see the priority items.\n//TODO Empty input form after items has been added.\n//TODO integrate search method to search for specific items.\n//TODO Search should ignore case-sensitivity.\n//TODO Integrate Web Storage API to save data in the Storage object(localStorage).\n//TODO Task in LocalStorage that has the data-attr = priority, should render as priority task when page is refresh/reload/visited again.\n//TODO Task in LocalStorage that has already been completed should be rendered in the completedListUl when page is refresh/reload/visited again.\n//TODO The priorityBtn of tasks in completedListUl should not be displayed when page is refresh/reloaded.\n//TODO Program should save the specific date a task was created.\n//TODO Program should save the specific date a task was completed.\n//TODO Replace icons using font awesome icons.\n//TODO Users should be able to sort tasks alphabetically\n//TODO Users should be able to sort tasks by date\n\n\n$(()=>{\n\n    // Construct the todoList object\n\n    let todoList = {\n\n        // Array of items\n        todos : [],\n\n        // create method to display all todoItems in the list\n        displayTodos () {\n            if(this.todos.length === 0){\n                console.log(\"The todo list is empty\");\n            } else {\n                for (let i = 0; i < this.todos.length; i++) {\n                    if (this.todos[i].completed === true) {\n                        console.log(\"(x)\", this.todos[i].todoTitle);\n                    } else {\n                        console.log(\"()\",this.todos[i].todoTitle);\n                    }\n                }\n            }\n        },\n        // Create method to add todoItems to the list\n        addTodo (todoTitle) {\n            this.todos.push({\n                todoTitle: todoTitle,\n                completed : false\n            });\n\n            this.displayTodos();\n        },\n        // Create method to Change todoItems in the list\n        changeTodoTitle (position, newTodoTitle) {\n            this.todos[position].todoTitle = newTodoTitle;\n            this.displayTodos();\n        },\n        // Create method to delete todoItems in the list\n        deletedTodo (position) {\n            this.todos.splice(position,1);\n            this.displayTodos();\n        },\n        // Create method to mark todoItems as completed in the list\n        toggleCompleted (position) {\n            let todo = this.todos[position];\n            todo.completed = !todo.completed;\n            this.displayTodos();\n        },\n        // Create method to toggle all todoItems in the list as completed or !completed\n        toggleAll () {\n            let totalTodos = this.todos.length;\n            let completedTodos = 0;\n\n            for(let i = 0; i < totalTodos; i++){\n                if(this.todos[i].completed === true){\n                    completedTodos++\n                }\n            }\n\n            if(completedTodos === totalTodos){\n                for(let i = 0; i < totalTodos; i++){\n                    this.todos[i].completed = false;\n                }\n                this.displayTodos();\n            } else {\n                for(let i = 0; i < totalTodos; i++){\n                    this.todos[i].completed = true;\n                }\n                this.displayTodos();\n            }\n        }\n    };\n\n\n\n\n});\n\n"]}